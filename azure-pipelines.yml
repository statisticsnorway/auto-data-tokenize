# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

  tags:
    include:
      - '*'
pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

jobs:
  - job: javaLibraryCompleteBuild
    displayName: 'Java library - build, verify, publish'
    # Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

    steps:
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'

      # Set env variable pointing to the file downloaded in previous task
      # as a library in next task needs this env variable
      - script: |
          echo "Setting env variable GOOGLE_APPLICATION_CREDENTIALS"
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Setting GOOGLE_APPLICATION_CREDENTIALS env variable'

      - task: Gradle@2
        displayName: 'Build'
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          #publishJUnitResults: true
          #testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean buildNeeded shadowJar -x test'

      - task: Gradle@2
        displayName: 'Publish'
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          #publishJUnitResults: true
          #testResultsFiles: '**/TEST-*.xml'
          tasks: 'publish'

      - task: Gradle@2
        displayName: 'Build python package'
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          #publishJUnitResults: true
          #testResultsFiles: '**/TEST-*.xml'
          tasks: 'pythonDist -x test'


  - job: buildAndPushDockerImage
    dependsOn: javaLibraryCompleteBuild
    displayName: 'Build and push docker image'
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), not(startsWith(variables['Build.SourceVersionMessage'], '[maven-release-plugin] prepare for next development iteration')))
    steps:

      # Download pipeline artifact
      - download: current
        displayName: 'Download pipeline artifact'
        patterns: |
          **/dapla-dlp*.zip
        artifact: build

      #Copy pipeline artifact into working directory
      - bash: |
          ls -latr $(Pipeline.Workspace)/build
          cp -r $(Pipeline.Workspace)/build .
          ls -latr build
        displayName: 'Copy pipeline artifact into working directory'
      #Create image tag
      - bash: |
          BRANCH="$(Build.SourceBranchName)"
          COMMIT_SHA="$(Build.SourceVersion)"
          IMAGE_TAG="${BRANCH}-${COMMIT_SHA:0:8}"
          SCAN_IMAGE_TAG="imagescan-${IMAGE_TAG}"
          echo "Image tag: ${IMAGE_TAG}"
          echo "Scan image tag: ${SCAN_IMAGE_TAG}"
          echo "##vso[task.setvariable variable=image_tag]${IMAGE_TAG}"
          echo "##vso[task.setvariable variable=scan_image_tag]${SCAN_IMAGE_TAG}"
        displayName: 'Create image tag'
        failOnStderr: true
      #Docker build
      - task: Docker@2
        displayName: 'Docker Build'
        inputs:
          repository: 'eu.gcr.io/prod-bip/ssb/dapla/dlpflow'
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: $(SCAN_IMAGE_TAG)
      #Docker login
      - task: Docker@2
        displayName: 'Docker login'
        inputs:
          command: 'login'
          containerRegistry: 'gcrServiceConnection'
      #Docker push
      - task: Docker@2
        displayName: 'Docker Push'
        inputs:
          repository: 'prod-bip/ssb/dapla/dlpflow'
          command: 'push'
          containerRegistry: 'gcrServiceConnection'
          tags: $(SCAN_IMAGE_TAG)
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        inputs:
          secureFile: 'gcr-key.json'
      - script: |
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Set GCR Key'
      - task: gcr-vulneralbility-check@1
        inputs:
          projectId: 'prod-bip'
          imageHost: 'https://eu.gcr.io/'
          image: 'prod-bip/ssb/dapla/dlpflow'
          imageTag: $(SCAN_IMAGE_TAG)
          timeBetweenRetries: '10000'
      - script: |
          set -e
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io/
          docker tag eu.gcr.io/prod-bip/ssb/dapla/dlpflow:$(SCAN_IMAGE_TAG) eu.gcr.io/prod-bip/ssb/dapla/dlpflow:$(IMAGE_TAG)
          docker push eu.gcr.io/prod-bip/ssb/dapla/dlpflow:$(IMAGE_TAG)
        displayName: 'Retag Image'
        condition: succeeded()
